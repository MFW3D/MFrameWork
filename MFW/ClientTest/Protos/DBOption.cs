// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DB_Option.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PDBOption {

  /// <summary>Holder for reflection information generated from DB_Option.proto</summary>
  public static partial class DBOptionReflection {

    #region Descriptor
    /// <summary>File descriptor for DB_Option.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DBOptionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9EQl9PcHRpb24ucHJvdG8SClBEQl9PcHRpb24aDURCX0Jhc2UucHJvdG8i",
            "OQoPR0RfR2V0REJBY2NvdW50Eg8KB3VpYWNjaWQYASABKA0SFQoNdWxEQkFj",
            "Y291bnRpZBgCIAEoBCJaCg9ER19HZXREQkFjY291bnQSDwoHdWlhY2NpZBgB",
            "IAEoDRIMCgRpUmV0GAIgASgFEigKC3N0REJBY2NvdW50GAMgASgLMhMuUERC",
            "X0Jhc2UuREJBY2NvdW50Ik8KEkdEX0NyZWF0ZURCQWNjb3VudBIPCgd1aWFj",
            "Y2lkGAEgASgNEigKC3N0REJBY2NvdW50GAIgASgLMhMuUERCX0Jhc2UuREJB",
            "Y2NvdW50Il0KEkRHX0NyZWF0ZURCQWNjb3VudBIPCgd1aWFjY2lkGAEgASgN",
            "EgwKBGlSZXQYAiABKAUSKAoLc3REQkFjY291bnQYAyABKAsyEy5QREJfQmFz",
            "ZS5EQkFjY291bnQiTwoSR0RfVXBkYXRlREJBY2NvdW50Eg8KB3VpYWNjaWQY",
            "ASABKA0SKAoLc3REQkFjY291bnQYAiABKAsyEy5QREJfQmFzZS5EQkFjY291",
            "bnQiMwoSREdfVXBkYXRlREJBY2NvdW50Eg8KB3VpYWNjaWQYASABKA0SDAoE",
            "aVJldBgCIAEoBSI8ChJHRF9EZWxldGVEQkFjY291bnQSDwoHdWlhY2NpZBgB",
            "IAEoDRIVCg11bERCQWNjb3VudGlkGAIgASgEIjMKEkRHX0RlbGV0ZURCQWNj",
            "b3VudBIPCgd1aWFjY2lkGAEgASgNEgwKBGlSZXQYAiABKAUiOwoQR0RfR2V0",
            "REJVc2VySW5mbxIPCgd1aWFjY2lkGAEgASgNEhYKDnVsREJVc2VySW5mb2lk",
            "GAIgASgEIl0KEERHX0dldERCVXNlckluZm8SDwoHdWlhY2NpZBgBIAEoDRIM",
            "CgRpUmV0GAIgASgFEioKDHN0REJVc2VySW5mbxgDIAEoCzIULlBEQl9CYXNl",
            "LkRCVXNlckluZm8iUgoTR0RfQ3JlYXRlREJVc2VySW5mbxIPCgd1aWFjY2lk",
            "GAEgASgNEioKDHN0REJVc2VySW5mbxgCIAEoCzIULlBEQl9CYXNlLkRCVXNl",
            "ckluZm8iYAoTREdfQ3JlYXRlREJVc2VySW5mbxIPCgd1aWFjY2lkGAEgASgN",
            "EgwKBGlSZXQYAiABKAUSKgoMc3REQlVzZXJJbmZvGAMgASgLMhQuUERCX0Jh",
            "c2UuREJVc2VySW5mbyJSChNHRF9VcGRhdGVEQlVzZXJJbmZvEg8KB3VpYWNj",
            "aWQYASABKA0SKgoMc3REQlVzZXJJbmZvGAIgASgLMhQuUERCX0Jhc2UuREJV",
            "c2VySW5mbyI0ChNER19VcGRhdGVEQlVzZXJJbmZvEg8KB3VpYWNjaWQYASAB",
            "KA0SDAoEaVJldBgCIAEoBSI+ChNHRF9EZWxldGVEQlVzZXJJbmZvEg8KB3Vp",
            "YWNjaWQYASABKA0SFgoOdWxEQlVzZXJJbmZvaWQYAiABKAQiNAoTREdfRGVs",
            "ZXRlREJVc2VySW5mbxIPCgd1aWFjY2lkGAEgASgNEgwKBGlSZXQYAiABKAUq",
            "tgMKB0VEQl9DTUQSDwoLREJfQ01EX05PTkUQABIVChBHRF9HRVRfREJBQ0NP",
            "VU5UEMoBEhUKEERHX0dFVF9EQkFDQ09VTlQQywESGAoTR0RfQ1JFQVRFX0RC",
            "QUNDT1VOVBDMARIYChNER19DUkVBVEVfREJBQ0NPVU5UEM0BEhgKE0dEX1VQ",
            "REFURV9EQkFDQ09VTlQQzgESGAoTREdfVVBEQVRFX0RCQUNDT1VOVBDPARIY",
            "ChNHRF9ERUxFVEVfREJBQ0NPVU5UENABEhgKE0RHX0RFTEVURV9EQkFDQ09V",
            "TlQQ0QESFgoRR0RfR0VUX0RCVVNFUklORk8Q0gESFgoRREdfR0VUX0RCVVNF",
            "UklORk8Q0wESGQoUR0RfQ1JFQVRFX0RCVVNFUklORk8Q1AESGQoUREdfQ1JF",
            "QVRFX0RCVVNFUklORk8Q1QESGQoUR0RfVVBEQVRFX0RCVVNFUklORk8Q1gES",
            "GQoUREdfVVBEQVRFX0RCVVNFUklORk8Q1wESGQoUR0RfREVMRVRFX0RCVVNF",
            "UklORk8Q2AESGQoUREdfREVMRVRFX0RCVVNFUklORk8Q2QFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PDBBase.DBBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PDBOption.EDB_CMD), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.GD_GetDBAccount), global::PDBOption.GD_GetDBAccount.Parser, new[]{ "Uiaccid", "UlDBAccountid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.DG_GetDBAccount), global::PDBOption.DG_GetDBAccount.Parser, new[]{ "Uiaccid", "IRet", "StDBAccount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.GD_CreateDBAccount), global::PDBOption.GD_CreateDBAccount.Parser, new[]{ "Uiaccid", "StDBAccount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.DG_CreateDBAccount), global::PDBOption.DG_CreateDBAccount.Parser, new[]{ "Uiaccid", "IRet", "StDBAccount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.GD_UpdateDBAccount), global::PDBOption.GD_UpdateDBAccount.Parser, new[]{ "Uiaccid", "StDBAccount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.DG_UpdateDBAccount), global::PDBOption.DG_UpdateDBAccount.Parser, new[]{ "Uiaccid", "IRet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.GD_DeleteDBAccount), global::PDBOption.GD_DeleteDBAccount.Parser, new[]{ "Uiaccid", "UlDBAccountid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.DG_DeleteDBAccount), global::PDBOption.DG_DeleteDBAccount.Parser, new[]{ "Uiaccid", "IRet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.GD_GetDBUserInfo), global::PDBOption.GD_GetDBUserInfo.Parser, new[]{ "Uiaccid", "UlDBUserInfoid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.DG_GetDBUserInfo), global::PDBOption.DG_GetDBUserInfo.Parser, new[]{ "Uiaccid", "IRet", "StDBUserInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.GD_CreateDBUserInfo), global::PDBOption.GD_CreateDBUserInfo.Parser, new[]{ "Uiaccid", "StDBUserInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.DG_CreateDBUserInfo), global::PDBOption.DG_CreateDBUserInfo.Parser, new[]{ "Uiaccid", "IRet", "StDBUserInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.GD_UpdateDBUserInfo), global::PDBOption.GD_UpdateDBUserInfo.Parser, new[]{ "Uiaccid", "StDBUserInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.DG_UpdateDBUserInfo), global::PDBOption.DG_UpdateDBUserInfo.Parser, new[]{ "Uiaccid", "IRet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.GD_DeleteDBUserInfo), global::PDBOption.GD_DeleteDBUserInfo.Parser, new[]{ "Uiaccid", "UlDBUserInfoid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBOption.DG_DeleteDBUserInfo), global::PDBOption.DG_DeleteDBUserInfo.Parser, new[]{ "Uiaccid", "IRet" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EDB_CMD {
    [pbr::OriginalName("DB_CMD_NONE")] DbCmdNone = 0,
    [pbr::OriginalName("GD_GET_DBACCOUNT")] GdGetDbaccount = 202,
    [pbr::OriginalName("DG_GET_DBACCOUNT")] DgGetDbaccount = 203,
    [pbr::OriginalName("GD_CREATE_DBACCOUNT")] GdCreateDbaccount = 204,
    [pbr::OriginalName("DG_CREATE_DBACCOUNT")] DgCreateDbaccount = 205,
    [pbr::OriginalName("GD_UPDATE_DBACCOUNT")] GdUpdateDbaccount = 206,
    [pbr::OriginalName("DG_UPDATE_DBACCOUNT")] DgUpdateDbaccount = 207,
    [pbr::OriginalName("GD_DELETE_DBACCOUNT")] GdDeleteDbaccount = 208,
    [pbr::OriginalName("DG_DELETE_DBACCOUNT")] DgDeleteDbaccount = 209,
    [pbr::OriginalName("GD_GET_DBUSERINFO")] GdGetDbuserinfo = 210,
    [pbr::OriginalName("DG_GET_DBUSERINFO")] DgGetDbuserinfo = 211,
    [pbr::OriginalName("GD_CREATE_DBUSERINFO")] GdCreateDbuserinfo = 212,
    [pbr::OriginalName("DG_CREATE_DBUSERINFO")] DgCreateDbuserinfo = 213,
    [pbr::OriginalName("GD_UPDATE_DBUSERINFO")] GdUpdateDbuserinfo = 214,
    [pbr::OriginalName("DG_UPDATE_DBUSERINFO")] DgUpdateDbuserinfo = 215,
    [pbr::OriginalName("GD_DELETE_DBUSERINFO")] GdDeleteDbuserinfo = 216,
    [pbr::OriginalName("DG_DELETE_DBUSERINFO")] DgDeleteDbuserinfo = 217,
  }

  #endregion

  #region Messages
  /// <summary>
  ///通过id获取DBAccount中的对应数据
  /// </summary>
  public sealed partial class GD_GetDBAccount : pb::IMessage<GD_GetDBAccount> {
    private static readonly pb::MessageParser<GD_GetDBAccount> _parser = new pb::MessageParser<GD_GetDBAccount>(() => new GD_GetDBAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GD_GetDBAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_GetDBAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_GetDBAccount(GD_GetDBAccount other) : this() {
      uiaccid_ = other.uiaccid_;
      ulDBAccountid_ = other.ulDBAccountid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_GetDBAccount Clone() {
      return new GD_GetDBAccount(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define GD_GET_DBACCOUNT 	202
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "ulDBAccountid" field.</summary>
    public const int UlDBAccountidFieldNumber = 2;
    private ulong ulDBAccountid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UlDBAccountid {
      get { return ulDBAccountid_; }
      set {
        ulDBAccountid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GD_GetDBAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GD_GetDBAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (UlDBAccountid != other.UlDBAccountid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (UlDBAccountid != 0UL) hash ^= UlDBAccountid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (UlDBAccountid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UlDBAccountid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (UlDBAccountid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UlDBAccountid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GD_GetDBAccount other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.UlDBAccountid != 0UL) {
        UlDBAccountid = other.UlDBAccountid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 16: {
            UlDBAccountid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DG_GetDBAccount : pb::IMessage<DG_GetDBAccount> {
    private static readonly pb::MessageParser<DG_GetDBAccount> _parser = new pb::MessageParser<DG_GetDBAccount>(() => new DG_GetDBAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DG_GetDBAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_GetDBAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_GetDBAccount(DG_GetDBAccount other) : this() {
      uiaccid_ = other.uiaccid_;
      iRet_ = other.iRet_;
      StDBAccount = other.stDBAccount_ != null ? other.StDBAccount.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_GetDBAccount Clone() {
      return new DG_GetDBAccount(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define DG_GET_DBACCOUNT 	203
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "iRet" field.</summary>
    public const int IRetFieldNumber = 2;
    private int iRet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IRet {
      get { return iRet_; }
      set {
        iRet_ = value;
      }
    }

    /// <summary>Field number for the "stDBAccount" field.</summary>
    public const int StDBAccountFieldNumber = 3;
    private global::PDBBase.DBAccount stDBAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PDBBase.DBAccount StDBAccount {
      get { return stDBAccount_; }
      set {
        stDBAccount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DG_GetDBAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DG_GetDBAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (IRet != other.IRet) return false;
      if (!object.Equals(StDBAccount, other.StDBAccount)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (IRet != 0) hash ^= IRet.GetHashCode();
      if (stDBAccount_ != null) hash ^= StDBAccount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (IRet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IRet);
      }
      if (stDBAccount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StDBAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (IRet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IRet);
      }
      if (stDBAccount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StDBAccount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DG_GetDBAccount other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.IRet != 0) {
        IRet = other.IRet;
      }
      if (other.stDBAccount_ != null) {
        if (stDBAccount_ == null) {
          stDBAccount_ = new global::PDBBase.DBAccount();
        }
        StDBAccount.MergeFrom(other.StDBAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 16: {
            IRet = input.ReadInt32();
            break;
          }
          case 26: {
            if (stDBAccount_ == null) {
              stDBAccount_ = new global::PDBBase.DBAccount();
            }
            input.ReadMessage(stDBAccount_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建DBAccount中的对应数据
  /// </summary>
  public sealed partial class GD_CreateDBAccount : pb::IMessage<GD_CreateDBAccount> {
    private static readonly pb::MessageParser<GD_CreateDBAccount> _parser = new pb::MessageParser<GD_CreateDBAccount>(() => new GD_CreateDBAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GD_CreateDBAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_CreateDBAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_CreateDBAccount(GD_CreateDBAccount other) : this() {
      uiaccid_ = other.uiaccid_;
      StDBAccount = other.stDBAccount_ != null ? other.StDBAccount.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_CreateDBAccount Clone() {
      return new GD_CreateDBAccount(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define GD_CREATE_DBACCOUNT 	204
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "stDBAccount" field.</summary>
    public const int StDBAccountFieldNumber = 2;
    private global::PDBBase.DBAccount stDBAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PDBBase.DBAccount StDBAccount {
      get { return stDBAccount_; }
      set {
        stDBAccount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GD_CreateDBAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GD_CreateDBAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (!object.Equals(StDBAccount, other.StDBAccount)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (stDBAccount_ != null) hash ^= StDBAccount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (stDBAccount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StDBAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (stDBAccount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StDBAccount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GD_CreateDBAccount other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.stDBAccount_ != null) {
        if (stDBAccount_ == null) {
          stDBAccount_ = new global::PDBBase.DBAccount();
        }
        StDBAccount.MergeFrom(other.StDBAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (stDBAccount_ == null) {
              stDBAccount_ = new global::PDBBase.DBAccount();
            }
            input.ReadMessage(stDBAccount_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DG_CreateDBAccount : pb::IMessage<DG_CreateDBAccount> {
    private static readonly pb::MessageParser<DG_CreateDBAccount> _parser = new pb::MessageParser<DG_CreateDBAccount>(() => new DG_CreateDBAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DG_CreateDBAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_CreateDBAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_CreateDBAccount(DG_CreateDBAccount other) : this() {
      uiaccid_ = other.uiaccid_;
      iRet_ = other.iRet_;
      StDBAccount = other.stDBAccount_ != null ? other.StDBAccount.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_CreateDBAccount Clone() {
      return new DG_CreateDBAccount(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define DG_CREATE_DBACCOUNT 	205
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "iRet" field.</summary>
    public const int IRetFieldNumber = 2;
    private int iRet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IRet {
      get { return iRet_; }
      set {
        iRet_ = value;
      }
    }

    /// <summary>Field number for the "stDBAccount" field.</summary>
    public const int StDBAccountFieldNumber = 3;
    private global::PDBBase.DBAccount stDBAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PDBBase.DBAccount StDBAccount {
      get { return stDBAccount_; }
      set {
        stDBAccount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DG_CreateDBAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DG_CreateDBAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (IRet != other.IRet) return false;
      if (!object.Equals(StDBAccount, other.StDBAccount)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (IRet != 0) hash ^= IRet.GetHashCode();
      if (stDBAccount_ != null) hash ^= StDBAccount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (IRet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IRet);
      }
      if (stDBAccount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StDBAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (IRet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IRet);
      }
      if (stDBAccount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StDBAccount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DG_CreateDBAccount other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.IRet != 0) {
        IRet = other.IRet;
      }
      if (other.stDBAccount_ != null) {
        if (stDBAccount_ == null) {
          stDBAccount_ = new global::PDBBase.DBAccount();
        }
        StDBAccount.MergeFrom(other.StDBAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 16: {
            IRet = input.ReadInt32();
            break;
          }
          case 26: {
            if (stDBAccount_ == null) {
              stDBAccount_ = new global::PDBBase.DBAccount();
            }
            input.ReadMessage(stDBAccount_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新DBAccount中的对应数据
  /// </summary>
  public sealed partial class GD_UpdateDBAccount : pb::IMessage<GD_UpdateDBAccount> {
    private static readonly pb::MessageParser<GD_UpdateDBAccount> _parser = new pb::MessageParser<GD_UpdateDBAccount>(() => new GD_UpdateDBAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GD_UpdateDBAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_UpdateDBAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_UpdateDBAccount(GD_UpdateDBAccount other) : this() {
      uiaccid_ = other.uiaccid_;
      StDBAccount = other.stDBAccount_ != null ? other.StDBAccount.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_UpdateDBAccount Clone() {
      return new GD_UpdateDBAccount(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define GD_UPDATE_DBACCOUNT 	206
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "stDBAccount" field.</summary>
    public const int StDBAccountFieldNumber = 2;
    private global::PDBBase.DBAccount stDBAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PDBBase.DBAccount StDBAccount {
      get { return stDBAccount_; }
      set {
        stDBAccount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GD_UpdateDBAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GD_UpdateDBAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (!object.Equals(StDBAccount, other.StDBAccount)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (stDBAccount_ != null) hash ^= StDBAccount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (stDBAccount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StDBAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (stDBAccount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StDBAccount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GD_UpdateDBAccount other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.stDBAccount_ != null) {
        if (stDBAccount_ == null) {
          stDBAccount_ = new global::PDBBase.DBAccount();
        }
        StDBAccount.MergeFrom(other.StDBAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (stDBAccount_ == null) {
              stDBAccount_ = new global::PDBBase.DBAccount();
            }
            input.ReadMessage(stDBAccount_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DG_UpdateDBAccount : pb::IMessage<DG_UpdateDBAccount> {
    private static readonly pb::MessageParser<DG_UpdateDBAccount> _parser = new pb::MessageParser<DG_UpdateDBAccount>(() => new DG_UpdateDBAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DG_UpdateDBAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_UpdateDBAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_UpdateDBAccount(DG_UpdateDBAccount other) : this() {
      uiaccid_ = other.uiaccid_;
      iRet_ = other.iRet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_UpdateDBAccount Clone() {
      return new DG_UpdateDBAccount(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define DG_UPDATE_DBACCOUNT 	207
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "iRet" field.</summary>
    public const int IRetFieldNumber = 2;
    private int iRet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IRet {
      get { return iRet_; }
      set {
        iRet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DG_UpdateDBAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DG_UpdateDBAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (IRet != other.IRet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (IRet != 0) hash ^= IRet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (IRet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IRet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (IRet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IRet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DG_UpdateDBAccount other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.IRet != 0) {
        IRet = other.IRet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 16: {
            IRet = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通过id删除DBAccount中的对应数据
  /// </summary>
  public sealed partial class GD_DeleteDBAccount : pb::IMessage<GD_DeleteDBAccount> {
    private static readonly pb::MessageParser<GD_DeleteDBAccount> _parser = new pb::MessageParser<GD_DeleteDBAccount>(() => new GD_DeleteDBAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GD_DeleteDBAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_DeleteDBAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_DeleteDBAccount(GD_DeleteDBAccount other) : this() {
      uiaccid_ = other.uiaccid_;
      ulDBAccountid_ = other.ulDBAccountid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_DeleteDBAccount Clone() {
      return new GD_DeleteDBAccount(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define GD_DELETE_DBACCOUNT 	208
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "ulDBAccountid" field.</summary>
    public const int UlDBAccountidFieldNumber = 2;
    private ulong ulDBAccountid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UlDBAccountid {
      get { return ulDBAccountid_; }
      set {
        ulDBAccountid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GD_DeleteDBAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GD_DeleteDBAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (UlDBAccountid != other.UlDBAccountid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (UlDBAccountid != 0UL) hash ^= UlDBAccountid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (UlDBAccountid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UlDBAccountid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (UlDBAccountid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UlDBAccountid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GD_DeleteDBAccount other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.UlDBAccountid != 0UL) {
        UlDBAccountid = other.UlDBAccountid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 16: {
            UlDBAccountid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DG_DeleteDBAccount : pb::IMessage<DG_DeleteDBAccount> {
    private static readonly pb::MessageParser<DG_DeleteDBAccount> _parser = new pb::MessageParser<DG_DeleteDBAccount>(() => new DG_DeleteDBAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DG_DeleteDBAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_DeleteDBAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_DeleteDBAccount(DG_DeleteDBAccount other) : this() {
      uiaccid_ = other.uiaccid_;
      iRet_ = other.iRet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_DeleteDBAccount Clone() {
      return new DG_DeleteDBAccount(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define DG_DELETE_DBACCOUNT 	209
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "iRet" field.</summary>
    public const int IRetFieldNumber = 2;
    private int iRet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IRet {
      get { return iRet_; }
      set {
        iRet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DG_DeleteDBAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DG_DeleteDBAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (IRet != other.IRet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (IRet != 0) hash ^= IRet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (IRet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IRet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (IRet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IRet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DG_DeleteDBAccount other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.IRet != 0) {
        IRet = other.IRet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 16: {
            IRet = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通过id获取DBUserInfo中的对应数据
  /// </summary>
  public sealed partial class GD_GetDBUserInfo : pb::IMessage<GD_GetDBUserInfo> {
    private static readonly pb::MessageParser<GD_GetDBUserInfo> _parser = new pb::MessageParser<GD_GetDBUserInfo>(() => new GD_GetDBUserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GD_GetDBUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_GetDBUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_GetDBUserInfo(GD_GetDBUserInfo other) : this() {
      uiaccid_ = other.uiaccid_;
      ulDBUserInfoid_ = other.ulDBUserInfoid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_GetDBUserInfo Clone() {
      return new GD_GetDBUserInfo(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define GD_GET_DBUSERINFO 	210
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "ulDBUserInfoid" field.</summary>
    public const int UlDBUserInfoidFieldNumber = 2;
    private ulong ulDBUserInfoid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UlDBUserInfoid {
      get { return ulDBUserInfoid_; }
      set {
        ulDBUserInfoid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GD_GetDBUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GD_GetDBUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (UlDBUserInfoid != other.UlDBUserInfoid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (UlDBUserInfoid != 0UL) hash ^= UlDBUserInfoid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (UlDBUserInfoid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UlDBUserInfoid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (UlDBUserInfoid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UlDBUserInfoid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GD_GetDBUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.UlDBUserInfoid != 0UL) {
        UlDBUserInfoid = other.UlDBUserInfoid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 16: {
            UlDBUserInfoid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DG_GetDBUserInfo : pb::IMessage<DG_GetDBUserInfo> {
    private static readonly pb::MessageParser<DG_GetDBUserInfo> _parser = new pb::MessageParser<DG_GetDBUserInfo>(() => new DG_GetDBUserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DG_GetDBUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_GetDBUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_GetDBUserInfo(DG_GetDBUserInfo other) : this() {
      uiaccid_ = other.uiaccid_;
      iRet_ = other.iRet_;
      StDBUserInfo = other.stDBUserInfo_ != null ? other.StDBUserInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_GetDBUserInfo Clone() {
      return new DG_GetDBUserInfo(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define DG_GET_DBUSERINFO 	211
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "iRet" field.</summary>
    public const int IRetFieldNumber = 2;
    private int iRet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IRet {
      get { return iRet_; }
      set {
        iRet_ = value;
      }
    }

    /// <summary>Field number for the "stDBUserInfo" field.</summary>
    public const int StDBUserInfoFieldNumber = 3;
    private global::PDBBase.DBUserInfo stDBUserInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PDBBase.DBUserInfo StDBUserInfo {
      get { return stDBUserInfo_; }
      set {
        stDBUserInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DG_GetDBUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DG_GetDBUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (IRet != other.IRet) return false;
      if (!object.Equals(StDBUserInfo, other.StDBUserInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (IRet != 0) hash ^= IRet.GetHashCode();
      if (stDBUserInfo_ != null) hash ^= StDBUserInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (IRet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IRet);
      }
      if (stDBUserInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StDBUserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (IRet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IRet);
      }
      if (stDBUserInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StDBUserInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DG_GetDBUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.IRet != 0) {
        IRet = other.IRet;
      }
      if (other.stDBUserInfo_ != null) {
        if (stDBUserInfo_ == null) {
          stDBUserInfo_ = new global::PDBBase.DBUserInfo();
        }
        StDBUserInfo.MergeFrom(other.StDBUserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 16: {
            IRet = input.ReadInt32();
            break;
          }
          case 26: {
            if (stDBUserInfo_ == null) {
              stDBUserInfo_ = new global::PDBBase.DBUserInfo();
            }
            input.ReadMessage(stDBUserInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建DBUserInfo中的对应数据
  /// </summary>
  public sealed partial class GD_CreateDBUserInfo : pb::IMessage<GD_CreateDBUserInfo> {
    private static readonly pb::MessageParser<GD_CreateDBUserInfo> _parser = new pb::MessageParser<GD_CreateDBUserInfo>(() => new GD_CreateDBUserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GD_CreateDBUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_CreateDBUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_CreateDBUserInfo(GD_CreateDBUserInfo other) : this() {
      uiaccid_ = other.uiaccid_;
      StDBUserInfo = other.stDBUserInfo_ != null ? other.StDBUserInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_CreateDBUserInfo Clone() {
      return new GD_CreateDBUserInfo(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define GD_CREATE_DBUSERINFO 	212
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "stDBUserInfo" field.</summary>
    public const int StDBUserInfoFieldNumber = 2;
    private global::PDBBase.DBUserInfo stDBUserInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PDBBase.DBUserInfo StDBUserInfo {
      get { return stDBUserInfo_; }
      set {
        stDBUserInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GD_CreateDBUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GD_CreateDBUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (!object.Equals(StDBUserInfo, other.StDBUserInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (stDBUserInfo_ != null) hash ^= StDBUserInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (stDBUserInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StDBUserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (stDBUserInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StDBUserInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GD_CreateDBUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.stDBUserInfo_ != null) {
        if (stDBUserInfo_ == null) {
          stDBUserInfo_ = new global::PDBBase.DBUserInfo();
        }
        StDBUserInfo.MergeFrom(other.StDBUserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (stDBUserInfo_ == null) {
              stDBUserInfo_ = new global::PDBBase.DBUserInfo();
            }
            input.ReadMessage(stDBUserInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DG_CreateDBUserInfo : pb::IMessage<DG_CreateDBUserInfo> {
    private static readonly pb::MessageParser<DG_CreateDBUserInfo> _parser = new pb::MessageParser<DG_CreateDBUserInfo>(() => new DG_CreateDBUserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DG_CreateDBUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_CreateDBUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_CreateDBUserInfo(DG_CreateDBUserInfo other) : this() {
      uiaccid_ = other.uiaccid_;
      iRet_ = other.iRet_;
      StDBUserInfo = other.stDBUserInfo_ != null ? other.StDBUserInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_CreateDBUserInfo Clone() {
      return new DG_CreateDBUserInfo(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define DG_CREATE_DBUSERINFO 	213
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "iRet" field.</summary>
    public const int IRetFieldNumber = 2;
    private int iRet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IRet {
      get { return iRet_; }
      set {
        iRet_ = value;
      }
    }

    /// <summary>Field number for the "stDBUserInfo" field.</summary>
    public const int StDBUserInfoFieldNumber = 3;
    private global::PDBBase.DBUserInfo stDBUserInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PDBBase.DBUserInfo StDBUserInfo {
      get { return stDBUserInfo_; }
      set {
        stDBUserInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DG_CreateDBUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DG_CreateDBUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (IRet != other.IRet) return false;
      if (!object.Equals(StDBUserInfo, other.StDBUserInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (IRet != 0) hash ^= IRet.GetHashCode();
      if (stDBUserInfo_ != null) hash ^= StDBUserInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (IRet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IRet);
      }
      if (stDBUserInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StDBUserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (IRet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IRet);
      }
      if (stDBUserInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StDBUserInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DG_CreateDBUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.IRet != 0) {
        IRet = other.IRet;
      }
      if (other.stDBUserInfo_ != null) {
        if (stDBUserInfo_ == null) {
          stDBUserInfo_ = new global::PDBBase.DBUserInfo();
        }
        StDBUserInfo.MergeFrom(other.StDBUserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 16: {
            IRet = input.ReadInt32();
            break;
          }
          case 26: {
            if (stDBUserInfo_ == null) {
              stDBUserInfo_ = new global::PDBBase.DBUserInfo();
            }
            input.ReadMessage(stDBUserInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新DBUserInfo中的对应数据
  /// </summary>
  public sealed partial class GD_UpdateDBUserInfo : pb::IMessage<GD_UpdateDBUserInfo> {
    private static readonly pb::MessageParser<GD_UpdateDBUserInfo> _parser = new pb::MessageParser<GD_UpdateDBUserInfo>(() => new GD_UpdateDBUserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GD_UpdateDBUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_UpdateDBUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_UpdateDBUserInfo(GD_UpdateDBUserInfo other) : this() {
      uiaccid_ = other.uiaccid_;
      StDBUserInfo = other.stDBUserInfo_ != null ? other.StDBUserInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_UpdateDBUserInfo Clone() {
      return new GD_UpdateDBUserInfo(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define GD_UPDATE_DBUSERINFO 	214
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "stDBUserInfo" field.</summary>
    public const int StDBUserInfoFieldNumber = 2;
    private global::PDBBase.DBUserInfo stDBUserInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PDBBase.DBUserInfo StDBUserInfo {
      get { return stDBUserInfo_; }
      set {
        stDBUserInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GD_UpdateDBUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GD_UpdateDBUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (!object.Equals(StDBUserInfo, other.StDBUserInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (stDBUserInfo_ != null) hash ^= StDBUserInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (stDBUserInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StDBUserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (stDBUserInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StDBUserInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GD_UpdateDBUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.stDBUserInfo_ != null) {
        if (stDBUserInfo_ == null) {
          stDBUserInfo_ = new global::PDBBase.DBUserInfo();
        }
        StDBUserInfo.MergeFrom(other.StDBUserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (stDBUserInfo_ == null) {
              stDBUserInfo_ = new global::PDBBase.DBUserInfo();
            }
            input.ReadMessage(stDBUserInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DG_UpdateDBUserInfo : pb::IMessage<DG_UpdateDBUserInfo> {
    private static readonly pb::MessageParser<DG_UpdateDBUserInfo> _parser = new pb::MessageParser<DG_UpdateDBUserInfo>(() => new DG_UpdateDBUserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DG_UpdateDBUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_UpdateDBUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_UpdateDBUserInfo(DG_UpdateDBUserInfo other) : this() {
      uiaccid_ = other.uiaccid_;
      iRet_ = other.iRet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_UpdateDBUserInfo Clone() {
      return new DG_UpdateDBUserInfo(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define DG_UPDATE_DBUSERINFO 	215
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "iRet" field.</summary>
    public const int IRetFieldNumber = 2;
    private int iRet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IRet {
      get { return iRet_; }
      set {
        iRet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DG_UpdateDBUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DG_UpdateDBUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (IRet != other.IRet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (IRet != 0) hash ^= IRet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (IRet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IRet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (IRet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IRet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DG_UpdateDBUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.IRet != 0) {
        IRet = other.IRet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 16: {
            IRet = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通过id删除DBUserInfo中的对应数据
  /// </summary>
  public sealed partial class GD_DeleteDBUserInfo : pb::IMessage<GD_DeleteDBUserInfo> {
    private static readonly pb::MessageParser<GD_DeleteDBUserInfo> _parser = new pb::MessageParser<GD_DeleteDBUserInfo>(() => new GD_DeleteDBUserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GD_DeleteDBUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_DeleteDBUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_DeleteDBUserInfo(GD_DeleteDBUserInfo other) : this() {
      uiaccid_ = other.uiaccid_;
      ulDBUserInfoid_ = other.ulDBUserInfoid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GD_DeleteDBUserInfo Clone() {
      return new GD_DeleteDBUserInfo(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define GD_DELETE_DBUSERINFO 	216
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "ulDBUserInfoid" field.</summary>
    public const int UlDBUserInfoidFieldNumber = 2;
    private ulong ulDBUserInfoid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UlDBUserInfoid {
      get { return ulDBUserInfoid_; }
      set {
        ulDBUserInfoid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GD_DeleteDBUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GD_DeleteDBUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (UlDBUserInfoid != other.UlDBUserInfoid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (UlDBUserInfoid != 0UL) hash ^= UlDBUserInfoid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (UlDBUserInfoid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UlDBUserInfoid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (UlDBUserInfoid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UlDBUserInfoid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GD_DeleteDBUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.UlDBUserInfoid != 0UL) {
        UlDBUserInfoid = other.UlDBUserInfoid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 16: {
            UlDBUserInfoid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DG_DeleteDBUserInfo : pb::IMessage<DG_DeleteDBUserInfo> {
    private static readonly pb::MessageParser<DG_DeleteDBUserInfo> _parser = new pb::MessageParser<DG_DeleteDBUserInfo>(() => new DG_DeleteDBUserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DG_DeleteDBUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBOption.DBOptionReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_DeleteDBUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_DeleteDBUserInfo(DG_DeleteDBUserInfo other) : this() {
      uiaccid_ = other.uiaccid_;
      iRet_ = other.iRet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DG_DeleteDBUserInfo Clone() {
      return new DG_DeleteDBUserInfo(this);
    }

    /// <summary>Field number for the "uiaccid" field.</summary>
    public const int UiaccidFieldNumber = 1;
    private uint uiaccid_;
    /// <summary>
    ///#define DG_DELETE_DBUSERINFO 	217
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uiaccid {
      get { return uiaccid_; }
      set {
        uiaccid_ = value;
      }
    }

    /// <summary>Field number for the "iRet" field.</summary>
    public const int IRetFieldNumber = 2;
    private int iRet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IRet {
      get { return iRet_; }
      set {
        iRet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DG_DeleteDBUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DG_DeleteDBUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uiaccid != other.Uiaccid) return false;
      if (IRet != other.IRet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uiaccid != 0) hash ^= Uiaccid.GetHashCode();
      if (IRet != 0) hash ^= IRet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uiaccid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uiaccid);
      }
      if (IRet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IRet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uiaccid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uiaccid);
      }
      if (IRet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IRet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DG_DeleteDBUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uiaccid != 0) {
        Uiaccid = other.Uiaccid;
      }
      if (other.IRet != 0) {
        IRet = other.IRet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uiaccid = input.ReadUInt32();
            break;
          }
          case 16: {
            IRet = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
