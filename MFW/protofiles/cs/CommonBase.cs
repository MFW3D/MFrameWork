// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common_Base.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PCommonBase {

  /// <summary>Holder for reflection information generated from Common_Base.proto</summary>
  public static partial class CommonBaseReflection {

    #region Descriptor
    /// <summary>File descriptor for Common_Base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonBaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFDb21tb25fQmFzZS5wcm90bxIMUENvbW1vbl9CYXNlIlUKB05ldEhlYWQS",
            "CwoDa2V5GAEgASgFEgsKA0NtZBgCIAEoBRINCgVJbmRleBgDIAEoBRINCgVD",
            "b3VudBgEIAEoBRISCgpEYXRhTGVuZ3RoGAUgASgFIjcKDk5ldFRyYW5zZmVy",
            "TXNnEgoKAmlkGAEgASgEEgsKA2NtZBgCIAEoBRIMCgRkYXRhGAMgASgJIkgK",
            "D05ldFRyYW5zZmVyTXNncxI1Cg9OZXRUcmFuc2Zlck1zZ3MYASADKAsyHC5Q",
            "Q29tbW9uX0Jhc2UuTmV0VHJhbnNmZXJNc2ciKgoJUFVzZXJJbmZvEgsKA3Vp",
            "ZBgBIAEoAxIQCghuaWNrbmFtZRgCIAEoDCIeCgZNVGVzdDESCQoBYRgBIAEo",
            "BRIJCgFiGAIgASgFIh4KBk1UZXN0MhIJCgFhGAIgASgFEgkKAWIYAyABKAUq",
            "RAoLRVB1YmxpY19DTUQSFAoQRVB1YmxpY19DTURfTm9uZRAAEh8KG0VQdWJs",
            "aWNfQ01EX1BhY2tUcmFuc2Zlck1zZxABKjgKC0VQdWJsaWNfUmV0EhIKDkVQ",
            "dWJsaWNfUmV0X09LEAASFQoRRVB1YmxpY19SZXRfRXJyb3IQASooCgVFVGVz",
            "dBIJCgVUZXN0MRAAEgkKBVRlc3QyEAESCQoFVGVzdDMQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PCommonBase.EPublic_CMD), typeof(global::PCommonBase.EPublic_Ret), typeof(global::PCommonBase.ETest), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PCommonBase.NetHead), global::PCommonBase.NetHead.Parser, new[]{ "Key", "Cmd", "Index", "Count", "DataLength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PCommonBase.NetTransferMsg), global::PCommonBase.NetTransferMsg.Parser, new[]{ "Id", "Cmd", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PCommonBase.NetTransferMsgs), global::PCommonBase.NetTransferMsgs.Parser, new[]{ "NetTransferMsgs_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PCommonBase.PUserInfo), global::PCommonBase.PUserInfo.Parser, new[]{ "Uid", "Nickname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PCommonBase.MTest1), global::PCommonBase.MTest1.Parser, new[]{ "A", "B" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PCommonBase.MTest2), global::PCommonBase.MTest2.Parser, new[]{ "A", "B" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///公共传输协议id占用1-1000内的协议号
  /// </summary>
  public enum EPublic_CMD {
    [pbr::OriginalName("EPublic_CMD_None")] None = 0,
    [pbr::OriginalName("EPublic_CMD_PackTransferMsg")] PackTransferMsg = 1,
  }

  public enum EPublic_Ret {
    [pbr::OriginalName("EPublic_Ret_OK")] Ok = 0,
    [pbr::OriginalName("EPublic_Ret_Error")] Error = 1,
  }

  public enum ETest {
    [pbr::OriginalName("Test1")] Test1 = 0,
    [pbr::OriginalName("Test2")] Test2 = 1,
    [pbr::OriginalName("Test3")] Test3 = 2,
  }

  #endregion

  #region Messages
  public sealed partial class NetHead : pb::IMessage<NetHead> {
    private static readonly pb::MessageParser<NetHead> _parser = new pb::MessageParser<NetHead>(() => new NetHead());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetHead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PCommonBase.CommonBaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetHead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetHead(NetHead other) : this() {
      key_ = other.key_;
      cmd_ = other.cmd_;
      index_ = other.index_;
      count_ = other.count_;
      dataLength_ = other.dataLength_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetHead Clone() {
      return new NetHead(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    /// <summary>
    ///服务器下发的key，key不正确不处理
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "Cmd" field.</summary>
    public const int CmdFieldNumber = 2;
    private int cmd_;
    /// <summary>
    ///消息id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    /// <summary>
    ///包编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 4;
    private int count_;
    /// <summary>
    ///包总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "DataLength" field.</summary>
    public const int DataLengthFieldNumber = 5;
    private int dataLength_;
    /// <summary>
    ///数据长度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataLength {
      get { return dataLength_; }
      set {
        dataLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetHead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetHead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Cmd != other.Cmd) return false;
      if (Index != other.Index) return false;
      if (Count != other.Count) return false;
      if (DataLength != other.DataLength) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (DataLength != 0) hash ^= DataLength.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (Cmd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cmd);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Count);
      }
      if (DataLength != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DataLength);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cmd);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (DataLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataLength);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetHead other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.DataLength != 0) {
        DataLength = other.DataLength;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 16: {
            Cmd = input.ReadInt32();
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
          case 32: {
            Count = input.ReadInt32();
            break;
          }
          case 40: {
            DataLength = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///网络封包传送子包
  /// </summary>
  public sealed partial class NetTransferMsg : pb::IMessage<NetTransferMsg> {
    private static readonly pb::MessageParser<NetTransferMsg> _parser = new pb::MessageParser<NetTransferMsg>(() => new NetTransferMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetTransferMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PCommonBase.CommonBaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetTransferMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetTransferMsg(NetTransferMsg other) : this() {
      id_ = other.id_;
      cmd_ = other.cmd_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetTransferMsg Clone() {
      return new NetTransferMsg(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 2;
    private int cmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetTransferMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetTransferMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Cmd != other.Cmd) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Cmd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cmd);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cmd);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetTransferMsg other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Cmd = input.ReadInt32();
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///网络封包传送包
  /// </summary>
  public sealed partial class NetTransferMsgs : pb::IMessage<NetTransferMsgs> {
    private static readonly pb::MessageParser<NetTransferMsgs> _parser = new pb::MessageParser<NetTransferMsgs>(() => new NetTransferMsgs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetTransferMsgs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PCommonBase.CommonBaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetTransferMsgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetTransferMsgs(NetTransferMsgs other) : this() {
      netTransferMsgs_ = other.netTransferMsgs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetTransferMsgs Clone() {
      return new NetTransferMsgs(this);
    }

    /// <summary>Field number for the "NetTransferMsgs" field.</summary>
    public const int NetTransferMsgs_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::PCommonBase.NetTransferMsg> _repeated_netTransferMsgs_codec
        = pb::FieldCodec.ForMessage(10, global::PCommonBase.NetTransferMsg.Parser);
    private readonly pbc::RepeatedField<global::PCommonBase.NetTransferMsg> netTransferMsgs_ = new pbc::RepeatedField<global::PCommonBase.NetTransferMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PCommonBase.NetTransferMsg> NetTransferMsgs_ {
      get { return netTransferMsgs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetTransferMsgs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetTransferMsgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!netTransferMsgs_.Equals(other.netTransferMsgs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= netTransferMsgs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      netTransferMsgs_.WriteTo(output, _repeated_netTransferMsgs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += netTransferMsgs_.CalculateSize(_repeated_netTransferMsgs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetTransferMsgs other) {
      if (other == null) {
        return;
      }
      netTransferMsgs_.Add(other.netTransferMsgs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            netTransferMsgs_.AddEntriesFrom(input, _repeated_netTransferMsgs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家信息
  /// </summary>
  public sealed partial class PUserInfo : pb::IMessage<PUserInfo> {
    private static readonly pb::MessageParser<PUserInfo> _parser = new pb::MessageParser<PUserInfo>(() => new PUserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PCommonBase.CommonBaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PUserInfo(PUserInfo other) : this() {
      uid_ = other.uid_;
      nickname_ = other.nickname_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PUserInfo Clone() {
      return new PUserInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private pb::ByteString nickname_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Nickname != other.Nickname) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Nickname);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Nickname);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            Nickname = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MTest1 : pb::IMessage<MTest1> {
    private static readonly pb::MessageParser<MTest1> _parser = new pb::MessageParser<MTest1>(() => new MTest1());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MTest1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PCommonBase.CommonBaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MTest1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MTest1(MTest1 other) : this() {
      a_ = other.a_;
      b_ = other.b_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MTest1 Clone() {
      return new MTest1(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private int b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MTest1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MTest1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (B != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(B);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MTest1 other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0) {
        B = other.B;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 16: {
            B = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MTest2 : pb::IMessage<MTest2> {
    private static readonly pb::MessageParser<MTest2> _parser = new pb::MessageParser<MTest2>(() => new MTest2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MTest2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PCommonBase.CommonBaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MTest2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MTest2(MTest2 other) : this() {
      a_ = other.a_;
      b_ = other.b_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MTest2 Clone() {
      return new MTest2(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 2;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 3;
    private int b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MTest2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MTest2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(A);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(B);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MTest2 other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0) {
        B = other.B;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            A = input.ReadInt32();
            break;
          }
          case 24: {
            B = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
