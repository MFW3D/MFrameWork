// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Manager_Login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Manager_Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PManager_Login {
class LM_ClientKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LM_ClientKey> {
} _LM_ClientKey_default_instance_;
class ML_ClientKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ML_ClientKey> {
} _ML_ClientKey_default_instance_;

namespace protobuf_Manager_5fLogin_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LM_ClientKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LM_ClientKey, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LM_ClientKey, conid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ML_ClientKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ML_ClientKey, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ML_ClientKey, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ML_ClientKey, conid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ML_ClientKey, uid_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LM_ClientKey)},
  { 7, -1, sizeof(ML_ClientKey)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LM_ClientKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ML_ClientKey_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Manager_Login.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _LM_ClientKey_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ML_ClientKey_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::PCommon_Base::protobuf_Common_5fBase_2eproto::InitDefaults();
  ::PDB_Base::protobuf_DB_5fBase_2eproto::InitDefaults();
  _LM_ClientKey_default_instance_.DefaultConstruct();
  _ML_ClientKey_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023Manager_Login.proto\022\016PManager_Login\032\021C"
      "ommon_Base.proto\032\rDB_Base.proto\"*\n\014LM_Cl"
      "ientKey\022\013\n\003Uid\030\001 \001(\003\022\r\n\005ConId\030\002 \001(\003\"D\n\014M"
      "L_ClientKey\022\013\n\003ret\030\001 \001(\005\022\013\n\003key\030\002 \001(\t\022\r\n"
      "\005ConId\030\003 \001(\003\022\013\n\003Uid\030\004 \001(\003*3\n\007EMC_CMD\022\020\n\014"
      "EMC_CMD_None\020\000\022\026\n\021EMC_CMD_ClientKey\020\241\037b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 246);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Manager_Login.proto", &protobuf_RegisterTypes);
  ::PCommon_Base::protobuf_Common_5fBase_2eproto::AddDescriptors();
  ::PDB_Base::protobuf_DB_5fBase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Manager_5fLogin_2eproto

const ::google::protobuf::EnumDescriptor* EMC_CMD_descriptor() {
  protobuf_Manager_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Manager_5fLogin_2eproto::file_level_enum_descriptors[0];
}
bool EMC_CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 4001:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LM_ClientKey::kUidFieldNumber;
const int LM_ClientKey::kConIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LM_ClientKey::LM_ClientKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Manager_5fLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PManager_Login.LM_ClientKey)
}
LM_ClientKey::LM_ClientKey(const LM_ClientKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    reinterpret_cast<char*>(&conid_) -
    reinterpret_cast<char*>(&uid_) + sizeof(conid_));
  // @@protoc_insertion_point(copy_constructor:PManager_Login.LM_ClientKey)
}

void LM_ClientKey::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&conid_) -
    reinterpret_cast<char*>(&uid_) + sizeof(conid_));
  _cached_size_ = 0;
}

LM_ClientKey::~LM_ClientKey() {
  // @@protoc_insertion_point(destructor:PManager_Login.LM_ClientKey)
  SharedDtor();
}

void LM_ClientKey::SharedDtor() {
}

void LM_ClientKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LM_ClientKey::descriptor() {
  protobuf_Manager_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Manager_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LM_ClientKey& LM_ClientKey::default_instance() {
  protobuf_Manager_5fLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

LM_ClientKey* LM_ClientKey::New(::google::protobuf::Arena* arena) const {
  LM_ClientKey* n = new LM_ClientKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LM_ClientKey::Clear() {
// @@protoc_insertion_point(message_clear_start:PManager_Login.LM_ClientKey)
  ::memset(&uid_, 0, reinterpret_cast<char*>(&conid_) -
    reinterpret_cast<char*>(&uid_) + sizeof(conid_));
}

bool LM_ClientKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PManager_Login.LM_ClientKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 Uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ConId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &conid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PManager_Login.LM_ClientKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PManager_Login.LM_ClientKey)
  return false;
#undef DO_
}

void LM_ClientKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PManager_Login.LM_ClientKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // int64 ConId = 2;
  if (this->conid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->conid(), output);
  }

  // @@protoc_insertion_point(serialize_end:PManager_Login.LM_ClientKey)
}

::google::protobuf::uint8* LM_ClientKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PManager_Login.LM_ClientKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // int64 ConId = 2;
  if (this->conid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->conid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PManager_Login.LM_ClientKey)
  return target;
}

size_t LM_ClientKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PManager_Login.LM_ClientKey)
  size_t total_size = 0;

  // int64 Uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  // int64 ConId = 2;
  if (this->conid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->conid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LM_ClientKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PManager_Login.LM_ClientKey)
  GOOGLE_DCHECK_NE(&from, this);
  const LM_ClientKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LM_ClientKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PManager_Login.LM_ClientKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PManager_Login.LM_ClientKey)
    MergeFrom(*source);
  }
}

void LM_ClientKey::MergeFrom(const LM_ClientKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PManager_Login.LM_ClientKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.conid() != 0) {
    set_conid(from.conid());
  }
}

void LM_ClientKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PManager_Login.LM_ClientKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LM_ClientKey::CopyFrom(const LM_ClientKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PManager_Login.LM_ClientKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LM_ClientKey::IsInitialized() const {
  return true;
}

void LM_ClientKey::Swap(LM_ClientKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LM_ClientKey::InternalSwap(LM_ClientKey* other) {
  std::swap(uid_, other->uid_);
  std::swap(conid_, other->conid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LM_ClientKey::GetMetadata() const {
  protobuf_Manager_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Manager_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LM_ClientKey

// int64 Uid = 1;
void LM_ClientKey::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LM_ClientKey::uid() const {
  // @@protoc_insertion_point(field_get:PManager_Login.LM_ClientKey.Uid)
  return uid_;
}
void LM_ClientKey::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:PManager_Login.LM_ClientKey.Uid)
}

// int64 ConId = 2;
void LM_ClientKey::clear_conid() {
  conid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LM_ClientKey::conid() const {
  // @@protoc_insertion_point(field_get:PManager_Login.LM_ClientKey.ConId)
  return conid_;
}
void LM_ClientKey::set_conid(::google::protobuf::int64 value) {
  
  conid_ = value;
  // @@protoc_insertion_point(field_set:PManager_Login.LM_ClientKey.ConId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ML_ClientKey::kRetFieldNumber;
const int ML_ClientKey::kKeyFieldNumber;
const int ML_ClientKey::kConIdFieldNumber;
const int ML_ClientKey::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ML_ClientKey::ML_ClientKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Manager_5fLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PManager_Login.ML_ClientKey)
}
ML_ClientKey::ML_ClientKey(const ML_ClientKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&conid_, &from.conid_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&conid_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:PManager_Login.ML_ClientKey)
}

void ML_ClientKey::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&conid_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&conid_) + sizeof(ret_));
  _cached_size_ = 0;
}

ML_ClientKey::~ML_ClientKey() {
  // @@protoc_insertion_point(destructor:PManager_Login.ML_ClientKey)
  SharedDtor();
}

void ML_ClientKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ML_ClientKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ML_ClientKey::descriptor() {
  protobuf_Manager_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Manager_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ML_ClientKey& ML_ClientKey::default_instance() {
  protobuf_Manager_5fLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ML_ClientKey* ML_ClientKey::New(::google::protobuf::Arena* arena) const {
  ML_ClientKey* n = new ML_ClientKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ML_ClientKey::Clear() {
// @@protoc_insertion_point(message_clear_start:PManager_Login.ML_ClientKey)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&conid_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&conid_) + sizeof(ret_));
}

bool ML_ClientKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PManager_Login.ML_ClientKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PManager_Login.ML_ClientKey.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ConId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &conid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Uid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PManager_Login.ML_ClientKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PManager_Login.ML_ClientKey)
  return false;
#undef DO_
}

void ML_ClientKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PManager_Login.ML_ClientKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PManager_Login.ML_ClientKey.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // int64 ConId = 3;
  if (this->conid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->conid(), output);
  }

  // int64 Uid = 4;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->uid(), output);
  }

  // @@protoc_insertion_point(serialize_end:PManager_Login.ML_ClientKey)
}

::google::protobuf::uint8* ML_ClientKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PManager_Login.ML_ClientKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PManager_Login.ML_ClientKey.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // int64 ConId = 3;
  if (this->conid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->conid(), target);
  }

  // int64 Uid = 4;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->uid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PManager_Login.ML_ClientKey)
  return target;
}

size_t ML_ClientKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PManager_Login.ML_ClientKey)
  size_t total_size = 0;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // int64 ConId = 3;
  if (this->conid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->conid());
  }

  // int64 Uid = 4;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ML_ClientKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PManager_Login.ML_ClientKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ML_ClientKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ML_ClientKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PManager_Login.ML_ClientKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PManager_Login.ML_ClientKey)
    MergeFrom(*source);
  }
}

void ML_ClientKey::MergeFrom(const ML_ClientKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PManager_Login.ML_ClientKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.conid() != 0) {
    set_conid(from.conid());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void ML_ClientKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PManager_Login.ML_ClientKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ML_ClientKey::CopyFrom(const ML_ClientKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PManager_Login.ML_ClientKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ML_ClientKey::IsInitialized() const {
  return true;
}

void ML_ClientKey::Swap(ML_ClientKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ML_ClientKey::InternalSwap(ML_ClientKey* other) {
  key_.Swap(&other->key_);
  std::swap(conid_, other->conid_);
  std::swap(uid_, other->uid_);
  std::swap(ret_, other->ret_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ML_ClientKey::GetMetadata() const {
  protobuf_Manager_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Manager_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ML_ClientKey

// int32 ret = 1;
void ML_ClientKey::clear_ret() {
  ret_ = 0;
}
::google::protobuf::int32 ML_ClientKey::ret() const {
  // @@protoc_insertion_point(field_get:PManager_Login.ML_ClientKey.ret)
  return ret_;
}
void ML_ClientKey::set_ret(::google::protobuf::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:PManager_Login.ML_ClientKey.ret)
}

// string key = 2;
void ML_ClientKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ML_ClientKey::key() const {
  // @@protoc_insertion_point(field_get:PManager_Login.ML_ClientKey.key)
  return key_.GetNoArena();
}
void ML_ClientKey::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PManager_Login.ML_ClientKey.key)
}
#if LANG_CXX11
void ML_ClientKey::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PManager_Login.ML_ClientKey.key)
}
#endif
void ML_ClientKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PManager_Login.ML_ClientKey.key)
}
void ML_ClientKey::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PManager_Login.ML_ClientKey.key)
}
::std::string* ML_ClientKey::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:PManager_Login.ML_ClientKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ML_ClientKey::release_key() {
  // @@protoc_insertion_point(field_release:PManager_Login.ML_ClientKey.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ML_ClientKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:PManager_Login.ML_ClientKey.key)
}

// int64 ConId = 3;
void ML_ClientKey::clear_conid() {
  conid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ML_ClientKey::conid() const {
  // @@protoc_insertion_point(field_get:PManager_Login.ML_ClientKey.ConId)
  return conid_;
}
void ML_ClientKey::set_conid(::google::protobuf::int64 value) {
  
  conid_ = value;
  // @@protoc_insertion_point(field_set:PManager_Login.ML_ClientKey.ConId)
}

// int64 Uid = 4;
void ML_ClientKey::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ML_ClientKey::uid() const {
  // @@protoc_insertion_point(field_get:PManager_Login.ML_ClientKey.Uid)
  return uid_;
}
void ML_ClientKey::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:PManager_Login.ML_ClientKey.Uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace PManager_Login

// @@protoc_insertion_point(global_scope)
