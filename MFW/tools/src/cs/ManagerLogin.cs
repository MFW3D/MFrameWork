// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Manager_Login.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PManagerLogin {

  /// <summary>Holder for reflection information generated from Manager_Login.proto</summary>
  public static partial class ManagerLoginReflection {

    #region Descriptor
    /// <summary>File descriptor for Manager_Login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ManagerLoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNNYW5hZ2VyX0xvZ2luLnByb3RvEg5QTWFuYWdlcl9Mb2dpbhoRQ29tbW9u",
            "X0Jhc2UucHJvdG8aDURCX0Jhc2UucHJvdG8iKgoMTE1fQ2xpZW50S2V5EgsK",
            "A1VpZBgBIAEoAxINCgVDb25JZBgCIAEoAyJECgxNTF9DbGllbnRLZXkSCwoD",
            "cmV0GAEgASgFEgsKA2tleRgCIAEoCRINCgVDb25JZBgDIAEoAxILCgNVaWQY",
            "BCABKAMqMwoHRU1DX0NNRBIQCgxFTUNfQ01EX05vbmUQABIWChFFTUNfQ01E",
            "X0NsaWVudEtleRChH2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PCommonBase.CommonBaseReflection.Descriptor, global::PDBBase.DBBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PManagerLogin.EMC_CMD), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PManagerLogin.LM_ClientKey), global::PManagerLogin.LM_ClientKey.Parser, new[]{ "Uid", "ConId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PManagerLogin.ML_ClientKey), global::PManagerLogin.ML_ClientKey.Parser, new[]{ "Ret", "Key", "ConId", "Uid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///
  ///协议规则前两个字母代表消息流向
  ///D:数据服务器
  ///M：管理服务器
  ///L：登录服务器
  ///G：逻辑服务器
  ///C：客户端
  ///后面更协议的名字
  ///命令枚举以服务器前客户端后的命名_CMD,一对协议对应一个消息id，推送协议占一个消息id
  ///
  ///管理服-登录服消息：4001-5000
  /// </summary>
  public enum EMC_CMD {
    [pbr::OriginalName("EMC_CMD_None")] None = 0,
    [pbr::OriginalName("EMC_CMD_ClientKey")] ClientKey = 4001,
  }

  #endregion

  #region Messages
  public sealed partial class LM_ClientKey : pb::IMessage<LM_ClientKey> {
    private static readonly pb::MessageParser<LM_ClientKey> _parser = new pb::MessageParser<LM_ClientKey>(() => new LM_ClientKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LM_ClientKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PManagerLogin.ManagerLoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LM_ClientKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LM_ClientKey(LM_ClientKey other) : this() {
      uid_ = other.uid_;
      conId_ = other.conId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LM_ClientKey Clone() {
      return new LM_ClientKey(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "ConId" field.</summary>
    public const int ConIdFieldNumber = 2;
    private long conId_;
    /// <summary>
    ///网络连接id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConId {
      get { return conId_; }
      set {
        conId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LM_ClientKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LM_ClientKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (ConId != other.ConId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (ConId != 0L) hash ^= ConId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (ConId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ConId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (ConId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LM_ClientKey other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.ConId != 0L) {
        ConId = other.ConId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            ConId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ML_ClientKey : pb::IMessage<ML_ClientKey> {
    private static readonly pb::MessageParser<ML_ClientKey> _parser = new pb::MessageParser<ML_ClientKey>(() => new ML_ClientKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ML_ClientKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PManagerLogin.ManagerLoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ML_ClientKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ML_ClientKey(ML_ClientKey other) : this() {
      ret_ = other.ret_;
      key_ = other.key_;
      conId_ = other.conId_;
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ML_ClientKey Clone() {
      return new ML_ClientKey(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    ///玩家获取的登录key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConId" field.</summary>
    public const int ConIdFieldNumber = 3;
    private long conId_;
    /// <summary>
    ///网络连接id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConId {
      get { return conId_; }
      set {
        conId_ = value;
      }
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 4;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ML_ClientKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ML_ClientKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Key != other.Key) return false;
      if (ConId != other.ConId) return false;
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (ConId != 0L) hash ^= ConId.GetHashCode();
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (ConId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ConId);
      }
      if (Uid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (ConId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ML_ClientKey other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.ConId != 0L) {
        ConId = other.ConId;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 24: {
            ConId = input.ReadInt64();
            break;
          }
          case 32: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
