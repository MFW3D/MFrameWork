// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DB_Login.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PDBLogin {

  /// <summary>Holder for reflection information generated from DB_Login.proto</summary>
  public static partial class DBLoginReflection {

    #region Descriptor
    /// <summary>File descriptor for DB_Login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DBLoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5EQl9Mb2dpbi5wcm90bxIJUERCX0xvZ2luGg1EQl9CYXNlLnByb3RvGhJM",
            "b2dpbl9DbGllbnQucHJvdG8iSAoMTERfVXNlckNoZWNrEg0KBUNvbklkGAEg",
            "ASgDEikKCGxvZ2luTXNnGAIgASgLMhcuUExvZ2luX0NsaWVudC5DTF9Mb2dp",
            "biJ9CgxETF9Vc2VyQ2hlY2sSCwoDcmV0GAEgASgFEg0KBUNvbklkGAIgASgD",
            "EikKCGxvZ2luTXNnGAMgASgLMhcuUExvZ2luX0NsaWVudC5DTF9Mb2dpbhIm",
            "CglkQkFjY291bnQYBCABKAsyEy5QREJfQmFzZS5EQkFjY291bnQqMwoHRURM",
            "X0NNRBIQCgxFRExfQ01EX05vbmUQABIWChFFRExfQ01EX1VzZXJDaGVjaxDR",
            "D2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PDBBase.DBBaseReflection.Descriptor, global::PLoginClient.LoginClientReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PDBLogin.EDL_CMD), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBLogin.LD_UserCheck), global::PDBLogin.LD_UserCheck.Parser, new[]{ "ConId", "LoginMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PDBLogin.DL_UserCheck), global::PDBLogin.DL_UserCheck.Parser, new[]{ "Ret", "ConId", "LoginMsg", "DBAccount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///
  ///数据服务器到登录服务器的消息命令定义
  /// </summary>
  public enum EDL_CMD {
    [pbr::OriginalName("EDL_CMD_None")] None = 0,
    [pbr::OriginalName("EDL_CMD_UserCheck")] UserCheck = 2001,
  }

  #endregion

  #region Messages
  /// <summary>
  ///玩家登录消息验证获取信息
  /// </summary>
  public sealed partial class LD_UserCheck : pb::IMessage<LD_UserCheck> {
    private static readonly pb::MessageParser<LD_UserCheck> _parser = new pb::MessageParser<LD_UserCheck>(() => new LD_UserCheck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LD_UserCheck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBLogin.DBLoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LD_UserCheck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LD_UserCheck(LD_UserCheck other) : this() {
      conId_ = other.conId_;
      LoginMsg = other.loginMsg_ != null ? other.LoginMsg.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LD_UserCheck Clone() {
      return new LD_UserCheck(this);
    }

    /// <summary>Field number for the "ConId" field.</summary>
    public const int ConIdFieldNumber = 1;
    private long conId_;
    /// <summary>
    ///网络连接id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConId {
      get { return conId_; }
      set {
        conId_ = value;
      }
    }

    /// <summary>Field number for the "loginMsg" field.</summary>
    public const int LoginMsgFieldNumber = 2;
    private global::PLoginClient.CL_Login loginMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PLoginClient.CL_Login LoginMsg {
      get { return loginMsg_; }
      set {
        loginMsg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LD_UserCheck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LD_UserCheck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConId != other.ConId) return false;
      if (!object.Equals(LoginMsg, other.LoginMsg)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConId != 0L) hash ^= ConId.GetHashCode();
      if (loginMsg_ != null) hash ^= LoginMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ConId);
      }
      if (loginMsg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LoginMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConId);
      }
      if (loginMsg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LD_UserCheck other) {
      if (other == null) {
        return;
      }
      if (other.ConId != 0L) {
        ConId = other.ConId;
      }
      if (other.loginMsg_ != null) {
        if (loginMsg_ == null) {
          loginMsg_ = new global::PLoginClient.CL_Login();
        }
        LoginMsg.MergeFrom(other.LoginMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConId = input.ReadInt64();
            break;
          }
          case 18: {
            if (loginMsg_ == null) {
              loginMsg_ = new global::PLoginClient.CL_Login();
            }
            input.ReadMessage(loginMsg_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DL_UserCheck : pb::IMessage<DL_UserCheck> {
    private static readonly pb::MessageParser<DL_UserCheck> _parser = new pb::MessageParser<DL_UserCheck>(() => new DL_UserCheck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DL_UserCheck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PDBLogin.DBLoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DL_UserCheck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DL_UserCheck(DL_UserCheck other) : this() {
      ret_ = other.ret_;
      conId_ = other.conId_;
      LoginMsg = other.loginMsg_ != null ? other.LoginMsg.Clone() : null;
      DBAccount = other.dBAccount_ != null ? other.DBAccount.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DL_UserCheck Clone() {
      return new DL_UserCheck(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "ConId" field.</summary>
    public const int ConIdFieldNumber = 2;
    private long conId_;
    /// <summary>
    ///网络连接id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConId {
      get { return conId_; }
      set {
        conId_ = value;
      }
    }

    /// <summary>Field number for the "loginMsg" field.</summary>
    public const int LoginMsgFieldNumber = 3;
    private global::PLoginClient.CL_Login loginMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PLoginClient.CL_Login LoginMsg {
      get { return loginMsg_; }
      set {
        loginMsg_ = value;
      }
    }

    /// <summary>Field number for the "dBAccount" field.</summary>
    public const int DBAccountFieldNumber = 4;
    private global::PDBBase.DBAccount dBAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PDBBase.DBAccount DBAccount {
      get { return dBAccount_; }
      set {
        dBAccount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DL_UserCheck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DL_UserCheck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (ConId != other.ConId) return false;
      if (!object.Equals(LoginMsg, other.LoginMsg)) return false;
      if (!object.Equals(DBAccount, other.DBAccount)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (ConId != 0L) hash ^= ConId.GetHashCode();
      if (loginMsg_ != null) hash ^= LoginMsg.GetHashCode();
      if (dBAccount_ != null) hash ^= DBAccount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (ConId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ConId);
      }
      if (loginMsg_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LoginMsg);
      }
      if (dBAccount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DBAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (ConId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConId);
      }
      if (loginMsg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginMsg);
      }
      if (dBAccount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DBAccount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DL_UserCheck other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.ConId != 0L) {
        ConId = other.ConId;
      }
      if (other.loginMsg_ != null) {
        if (loginMsg_ == null) {
          loginMsg_ = new global::PLoginClient.CL_Login();
        }
        LoginMsg.MergeFrom(other.LoginMsg);
      }
      if (other.dBAccount_ != null) {
        if (dBAccount_ == null) {
          dBAccount_ = new global::PDBBase.DBAccount();
        }
        DBAccount.MergeFrom(other.DBAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            ConId = input.ReadInt64();
            break;
          }
          case 26: {
            if (loginMsg_ == null) {
              loginMsg_ = new global::PLoginClient.CL_Login();
            }
            input.ReadMessage(loginMsg_);
            break;
          }
          case 34: {
            if (dBAccount_ == null) {
              dBAccount_ = new global::PDBBase.DBAccount();
            }
            input.ReadMessage(dBAccount_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
