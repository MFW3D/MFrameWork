// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common_Base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Common_Base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PCommon_Base {
class NetHeadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetHead> {
} _NetHead_default_instance_;
class NetTransferMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetTransferMsg> {
} _NetTransferMsg_default_instance_;
class NetTransferMsgsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetTransferMsgs> {
} _NetTransferMsgs_default_instance_;
class PUserInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PUserInfo> {
} _PUserInfo_default_instance_;
class MTest1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MTest1> {
} _MTest1_default_instance_;
class MTest2DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MTest2> {
} _MTest2_default_instance_;

namespace protobuf_Common_5fBase_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetHead, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetHead, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetHead, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetHead, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetHead, datalength_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetTransferMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetTransferMsg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetTransferMsg, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetTransferMsg, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetTransferMsgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetTransferMsgs, nettransfermsgs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUserInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUserInfo, nickname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTest1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTest1, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTest1, b_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTest2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTest2, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTest2, b_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(NetHead)},
  { 10, -1, sizeof(NetTransferMsg)},
  { 18, -1, sizeof(NetTransferMsgs)},
  { 24, -1, sizeof(PUserInfo)},
  { 31, -1, sizeof(MTest1)},
  { 38, -1, sizeof(MTest2)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetTransferMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetTransferMsgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PUserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MTest1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MTest2_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Common_Base.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _NetHead_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _NetTransferMsg_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _NetTransferMsgs_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PUserInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _MTest1_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _MTest2_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NetHead_default_instance_.DefaultConstruct();
  _NetTransferMsg_default_instance_.DefaultConstruct();
  _NetTransferMsgs_default_instance_.DefaultConstruct();
  _PUserInfo_default_instance_.DefaultConstruct();
  _MTest1_default_instance_.DefaultConstruct();
  _MTest2_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021Common_Base.proto\022\014PCommon_Base\"U\n\007Net"
      "Head\022\013\n\003key\030\001 \001(\005\022\013\n\003Cmd\030\002 \001(\005\022\r\n\005Index\030"
      "\003 \001(\005\022\r\n\005Count\030\004 \001(\005\022\022\n\nDataLength\030\005 \001(\005"
      "\"7\n\016NetTransferMsg\022\n\n\002id\030\001 \001(\004\022\013\n\003cmd\030\002 "
      "\001(\005\022\014\n\004data\030\003 \001(\t\"H\n\017NetTransferMsgs\0225\n\017"
      "NetTransferMsgs\030\001 \003(\0132\034.PCommon_Base.Net"
      "TransferMsg\"*\n\tPUserInfo\022\013\n\003uid\030\001 \001(\003\022\020\n"
      "\010nickname\030\002 \001(\014\"\036\n\006MTest1\022\t\n\001a\030\001 \001(\005\022\t\n\001"
      "b\030\002 \001(\005\"\036\n\006MTest2\022\t\n\001a\030\002 \001(\005\022\t\n\001b\030\003 \001(\005*"
      "D\n\013EPublic_CMD\022\024\n\020EPublic_CMD_None\020\000\022\037\n\033"
      "EPublic_CMD_PackTransferMsg\020\001*8\n\013EPublic"
      "_Ret\022\022\n\016EPublic_Ret_OK\020\000\022\025\n\021EPublic_Ret_"
      "Error\020\001*(\n\005ETest\022\t\n\005Test1\020\000\022\t\n\005Test2\020\001\022\t"
      "\n\005Test3\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 537);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Common_Base.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Common_5fBase_2eproto

const ::google::protobuf::EnumDescriptor* EPublic_CMD_descriptor() {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_enum_descriptors[0];
}
bool EPublic_CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPublic_Ret_descriptor() {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_enum_descriptors[1];
}
bool EPublic_Ret_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETest_descriptor() {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_enum_descriptors[2];
}
bool ETest_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetHead::kKeyFieldNumber;
const int NetHead::kCmdFieldNumber;
const int NetHead::kIndexFieldNumber;
const int NetHead::kCountFieldNumber;
const int NetHead::kDataLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetHead::NetHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Common_5fBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PCommon_Base.NetHead)
}
NetHead::NetHead(const NetHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    reinterpret_cast<char*>(&datalength_) -
    reinterpret_cast<char*>(&key_) + sizeof(datalength_));
  // @@protoc_insertion_point(copy_constructor:PCommon_Base.NetHead)
}

void NetHead::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&datalength_) -
    reinterpret_cast<char*>(&key_) + sizeof(datalength_));
  _cached_size_ = 0;
}

NetHead::~NetHead() {
  // @@protoc_insertion_point(destructor:PCommon_Base.NetHead)
  SharedDtor();
}

void NetHead::SharedDtor() {
}

void NetHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetHead::descriptor() {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetHead& NetHead::default_instance() {
  protobuf_Common_5fBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetHead* NetHead::New(::google::protobuf::Arena* arena) const {
  NetHead* n = new NetHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetHead::Clear() {
// @@protoc_insertion_point(message_clear_start:PCommon_Base.NetHead)
  ::memset(&key_, 0, reinterpret_cast<char*>(&datalength_) -
    reinterpret_cast<char*>(&key_) + sizeof(datalength_));
}

bool NetHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PCommon_Base.NetHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DataLength = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datalength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PCommon_Base.NetHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PCommon_Base.NetHead)
  return false;
#undef DO_
}

void NetHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PCommon_Base.NetHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // int32 Cmd = 2;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }

  // int32 Index = 3;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // int32 Count = 4;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // int32 DataLength = 5;
  if (this->datalength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->datalength(), output);
  }

  // @@protoc_insertion_point(serialize_end:PCommon_Base.NetHead)
}

::google::protobuf::uint8* NetHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PCommon_Base.NetHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // int32 Cmd = 2;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }

  // int32 Index = 3;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // int32 Count = 4;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // int32 DataLength = 5;
  if (this->datalength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->datalength(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PCommon_Base.NetHead)
  return target;
}

size_t NetHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PCommon_Base.NetHead)
  size_t total_size = 0;

  // int32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  // int32 Cmd = 2;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  // int32 Index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // int32 Count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 DataLength = 5;
  if (this->datalength() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datalength());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PCommon_Base.NetHead)
  GOOGLE_DCHECK_NE(&from, this);
  const NetHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PCommon_Base.NetHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PCommon_Base.NetHead)
    MergeFrom(*source);
  }
}

void NetHead::MergeFrom(const NetHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PCommon_Base.NetHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.datalength() != 0) {
    set_datalength(from.datalength());
  }
}

void NetHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PCommon_Base.NetHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetHead::CopyFrom(const NetHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PCommon_Base.NetHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetHead::IsInitialized() const {
  return true;
}

void NetHead::Swap(NetHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetHead::InternalSwap(NetHead* other) {
  std::swap(key_, other->key_);
  std::swap(cmd_, other->cmd_);
  std::swap(index_, other->index_);
  std::swap(count_, other->count_);
  std::swap(datalength_, other->datalength_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetHead::GetMetadata() const {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetHead

// int32 key = 1;
void NetHead::clear_key() {
  key_ = 0;
}
::google::protobuf::int32 NetHead::key() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.NetHead.key)
  return key_;
}
void NetHead::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:PCommon_Base.NetHead.key)
}

// int32 Cmd = 2;
void NetHead::clear_cmd() {
  cmd_ = 0;
}
::google::protobuf::int32 NetHead::cmd() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.NetHead.Cmd)
  return cmd_;
}
void NetHead::set_cmd(::google::protobuf::int32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:PCommon_Base.NetHead.Cmd)
}

// int32 Index = 3;
void NetHead::clear_index() {
  index_ = 0;
}
::google::protobuf::int32 NetHead::index() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.NetHead.Index)
  return index_;
}
void NetHead::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:PCommon_Base.NetHead.Index)
}

// int32 Count = 4;
void NetHead::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 NetHead::count() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.NetHead.Count)
  return count_;
}
void NetHead::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:PCommon_Base.NetHead.Count)
}

// int32 DataLength = 5;
void NetHead::clear_datalength() {
  datalength_ = 0;
}
::google::protobuf::int32 NetHead::datalength() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.NetHead.DataLength)
  return datalength_;
}
void NetHead::set_datalength(::google::protobuf::int32 value) {
  
  datalength_ = value;
  // @@protoc_insertion_point(field_set:PCommon_Base.NetHead.DataLength)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetTransferMsg::kIdFieldNumber;
const int NetTransferMsg::kCmdFieldNumber;
const int NetTransferMsg::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetTransferMsg::NetTransferMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Common_5fBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PCommon_Base.NetTransferMsg)
}
NetTransferMsg::NetTransferMsg(const NetTransferMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&id_) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:PCommon_Base.NetTransferMsg)
}

void NetTransferMsg::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&id_) + sizeof(cmd_));
  _cached_size_ = 0;
}

NetTransferMsg::~NetTransferMsg() {
  // @@protoc_insertion_point(destructor:PCommon_Base.NetTransferMsg)
  SharedDtor();
}

void NetTransferMsg::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetTransferMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetTransferMsg::descriptor() {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetTransferMsg& NetTransferMsg::default_instance() {
  protobuf_Common_5fBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetTransferMsg* NetTransferMsg::New(::google::protobuf::Arena* arena) const {
  NetTransferMsg* n = new NetTransferMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetTransferMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:PCommon_Base.NetTransferMsg)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&id_) + sizeof(cmd_));
}

bool NetTransferMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PCommon_Base.NetTransferMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PCommon_Base.NetTransferMsg.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PCommon_Base.NetTransferMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PCommon_Base.NetTransferMsg)
  return false;
#undef DO_
}

void NetTransferMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PCommon_Base.NetTransferMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // int32 cmd = 2;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PCommon_Base.NetTransferMsg.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:PCommon_Base.NetTransferMsg)
}

::google::protobuf::uint8* NetTransferMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PCommon_Base.NetTransferMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // int32 cmd = 2;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PCommon_Base.NetTransferMsg.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PCommon_Base.NetTransferMsg)
  return target;
}

size_t NetTransferMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PCommon_Base.NetTransferMsg)
  size_t total_size = 0;

  // string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // int32 cmd = 2;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetTransferMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PCommon_Base.NetTransferMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const NetTransferMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetTransferMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PCommon_Base.NetTransferMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PCommon_Base.NetTransferMsg)
    MergeFrom(*source);
  }
}

void NetTransferMsg::MergeFrom(const NetTransferMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PCommon_Base.NetTransferMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
}

void NetTransferMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PCommon_Base.NetTransferMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetTransferMsg::CopyFrom(const NetTransferMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PCommon_Base.NetTransferMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetTransferMsg::IsInitialized() const {
  return true;
}

void NetTransferMsg::Swap(NetTransferMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetTransferMsg::InternalSwap(NetTransferMsg* other) {
  data_.Swap(&other->data_);
  std::swap(id_, other->id_);
  std::swap(cmd_, other->cmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetTransferMsg::GetMetadata() const {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetTransferMsg

// uint64 id = 1;
void NetTransferMsg::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetTransferMsg::id() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.NetTransferMsg.id)
  return id_;
}
void NetTransferMsg::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:PCommon_Base.NetTransferMsg.id)
}

// int32 cmd = 2;
void NetTransferMsg::clear_cmd() {
  cmd_ = 0;
}
::google::protobuf::int32 NetTransferMsg::cmd() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.NetTransferMsg.cmd)
  return cmd_;
}
void NetTransferMsg::set_cmd(::google::protobuf::int32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:PCommon_Base.NetTransferMsg.cmd)
}

// string data = 3;
void NetTransferMsg::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetTransferMsg::data() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.NetTransferMsg.data)
  return data_.GetNoArena();
}
void NetTransferMsg::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PCommon_Base.NetTransferMsg.data)
}
#if LANG_CXX11
void NetTransferMsg::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PCommon_Base.NetTransferMsg.data)
}
#endif
void NetTransferMsg::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PCommon_Base.NetTransferMsg.data)
}
void NetTransferMsg::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PCommon_Base.NetTransferMsg.data)
}
::std::string* NetTransferMsg::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:PCommon_Base.NetTransferMsg.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetTransferMsg::release_data() {
  // @@protoc_insertion_point(field_release:PCommon_Base.NetTransferMsg.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetTransferMsg::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:PCommon_Base.NetTransferMsg.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetTransferMsgs::kNetTransferMsgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetTransferMsgs::NetTransferMsgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Common_5fBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PCommon_Base.NetTransferMsgs)
}
NetTransferMsgs::NetTransferMsgs(const NetTransferMsgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nettransfermsgs_(from.nettransfermsgs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PCommon_Base.NetTransferMsgs)
}

void NetTransferMsgs::SharedCtor() {
  _cached_size_ = 0;
}

NetTransferMsgs::~NetTransferMsgs() {
  // @@protoc_insertion_point(destructor:PCommon_Base.NetTransferMsgs)
  SharedDtor();
}

void NetTransferMsgs::SharedDtor() {
}

void NetTransferMsgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetTransferMsgs::descriptor() {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetTransferMsgs& NetTransferMsgs::default_instance() {
  protobuf_Common_5fBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetTransferMsgs* NetTransferMsgs::New(::google::protobuf::Arena* arena) const {
  NetTransferMsgs* n = new NetTransferMsgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetTransferMsgs::Clear() {
// @@protoc_insertion_point(message_clear_start:PCommon_Base.NetTransferMsgs)
  nettransfermsgs_.Clear();
}

bool NetTransferMsgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PCommon_Base.NetTransferMsgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PCommon_Base.NetTransferMsg NetTransferMsgs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nettransfermsgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PCommon_Base.NetTransferMsgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PCommon_Base.NetTransferMsgs)
  return false;
#undef DO_
}

void NetTransferMsgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PCommon_Base.NetTransferMsgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PCommon_Base.NetTransferMsg NetTransferMsgs = 1;
  for (unsigned int i = 0, n = this->nettransfermsgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nettransfermsgs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:PCommon_Base.NetTransferMsgs)
}

::google::protobuf::uint8* NetTransferMsgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PCommon_Base.NetTransferMsgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PCommon_Base.NetTransferMsg NetTransferMsgs = 1;
  for (unsigned int i = 0, n = this->nettransfermsgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->nettransfermsgs(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PCommon_Base.NetTransferMsgs)
  return target;
}

size_t NetTransferMsgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PCommon_Base.NetTransferMsgs)
  size_t total_size = 0;

  // repeated .PCommon_Base.NetTransferMsg NetTransferMsgs = 1;
  {
    unsigned int count = this->nettransfermsgs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nettransfermsgs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetTransferMsgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PCommon_Base.NetTransferMsgs)
  GOOGLE_DCHECK_NE(&from, this);
  const NetTransferMsgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetTransferMsgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PCommon_Base.NetTransferMsgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PCommon_Base.NetTransferMsgs)
    MergeFrom(*source);
  }
}

void NetTransferMsgs::MergeFrom(const NetTransferMsgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PCommon_Base.NetTransferMsgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nettransfermsgs_.MergeFrom(from.nettransfermsgs_);
}

void NetTransferMsgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PCommon_Base.NetTransferMsgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetTransferMsgs::CopyFrom(const NetTransferMsgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PCommon_Base.NetTransferMsgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetTransferMsgs::IsInitialized() const {
  return true;
}

void NetTransferMsgs::Swap(NetTransferMsgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetTransferMsgs::InternalSwap(NetTransferMsgs* other) {
  nettransfermsgs_.InternalSwap(&other->nettransfermsgs_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetTransferMsgs::GetMetadata() const {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetTransferMsgs

// repeated .PCommon_Base.NetTransferMsg NetTransferMsgs = 1;
int NetTransferMsgs::nettransfermsgs_size() const {
  return nettransfermsgs_.size();
}
void NetTransferMsgs::clear_nettransfermsgs() {
  nettransfermsgs_.Clear();
}
const ::PCommon_Base::NetTransferMsg& NetTransferMsgs::nettransfermsgs(int index) const {
  // @@protoc_insertion_point(field_get:PCommon_Base.NetTransferMsgs.NetTransferMsgs)
  return nettransfermsgs_.Get(index);
}
::PCommon_Base::NetTransferMsg* NetTransferMsgs::mutable_nettransfermsgs(int index) {
  // @@protoc_insertion_point(field_mutable:PCommon_Base.NetTransferMsgs.NetTransferMsgs)
  return nettransfermsgs_.Mutable(index);
}
::PCommon_Base::NetTransferMsg* NetTransferMsgs::add_nettransfermsgs() {
  // @@protoc_insertion_point(field_add:PCommon_Base.NetTransferMsgs.NetTransferMsgs)
  return nettransfermsgs_.Add();
}
::google::protobuf::RepeatedPtrField< ::PCommon_Base::NetTransferMsg >*
NetTransferMsgs::mutable_nettransfermsgs() {
  // @@protoc_insertion_point(field_mutable_list:PCommon_Base.NetTransferMsgs.NetTransferMsgs)
  return &nettransfermsgs_;
}
const ::google::protobuf::RepeatedPtrField< ::PCommon_Base::NetTransferMsg >&
NetTransferMsgs::nettransfermsgs() const {
  // @@protoc_insertion_point(field_list:PCommon_Base.NetTransferMsgs.NetTransferMsgs)
  return nettransfermsgs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PUserInfo::kUidFieldNumber;
const int PUserInfo::kNicknameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PUserInfo::PUserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Common_5fBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PCommon_Base.PUserInfo)
}
PUserInfo::PUserInfo(const PUserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:PCommon_Base.PUserInfo)
}

void PUserInfo::SharedCtor() {
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

PUserInfo::~PUserInfo() {
  // @@protoc_insertion_point(destructor:PCommon_Base.PUserInfo)
  SharedDtor();
}

void PUserInfo::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PUserInfo::descriptor() {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PUserInfo& PUserInfo::default_instance() {
  protobuf_Common_5fBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

PUserInfo* PUserInfo::New(::google::protobuf::Arena* arena) const {
  PUserInfo* n = new PUserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PCommon_Base.PUserInfo)
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_LONGLONG(0);
}

bool PUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PCommon_Base.PUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PCommon_Base.PUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PCommon_Base.PUserInfo)
  return false;
#undef DO_
}

void PUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PCommon_Base.PUserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // bytes nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nickname(), output);
  }

  // @@protoc_insertion_point(serialize_end:PCommon_Base.PUserInfo)
}

::google::protobuf::uint8* PUserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PCommon_Base.PUserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // bytes nickname = 2;
  if (this->nickname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nickname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PCommon_Base.PUserInfo)
  return target;
}

size_t PUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PCommon_Base.PUserInfo)
  size_t total_size = 0;

  // bytes nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nickname());
  }

  // int64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PCommon_Base.PUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PUserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PUserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PCommon_Base.PUserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PCommon_Base.PUserInfo)
    MergeFrom(*source);
  }
}

void PUserInfo::MergeFrom(const PUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PCommon_Base.PUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void PUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PCommon_Base.PUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUserInfo::CopyFrom(const PUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PCommon_Base.PUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUserInfo::IsInitialized() const {
  return true;
}

void PUserInfo::Swap(PUserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PUserInfo::InternalSwap(PUserInfo* other) {
  nickname_.Swap(&other->nickname_);
  std::swap(uid_, other->uid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PUserInfo::GetMetadata() const {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PUserInfo

// int64 uid = 1;
void PUserInfo::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.PUserInfo.uid)
  return uid_;
}
void PUserInfo::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:PCommon_Base.PUserInfo.uid)
}

// bytes nickname = 2;
void PUserInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PUserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.PUserInfo.nickname)
  return nickname_.GetNoArena();
}
void PUserInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PCommon_Base.PUserInfo.nickname)
}
#if LANG_CXX11
void PUserInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PCommon_Base.PUserInfo.nickname)
}
#endif
void PUserInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PCommon_Base.PUserInfo.nickname)
}
void PUserInfo::set_nickname(const void* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PCommon_Base.PUserInfo.nickname)
}
::std::string* PUserInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:PCommon_Base.PUserInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PUserInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:PCommon_Base.PUserInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PUserInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:PCommon_Base.PUserInfo.nickname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MTest1::kAFieldNumber;
const int MTest1::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MTest1::MTest1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Common_5fBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PCommon_Base.MTest1)
}
MTest1::MTest1(const MTest1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:PCommon_Base.MTest1)
}

void MTest1::SharedCtor() {
  ::memset(&a_, 0, reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_) + sizeof(b_));
  _cached_size_ = 0;
}

MTest1::~MTest1() {
  // @@protoc_insertion_point(destructor:PCommon_Base.MTest1)
  SharedDtor();
}

void MTest1::SharedDtor() {
}

void MTest1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTest1::descriptor() {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MTest1& MTest1::default_instance() {
  protobuf_Common_5fBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

MTest1* MTest1::New(::google::protobuf::Arena* arena) const {
  MTest1* n = new MTest1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MTest1::Clear() {
// @@protoc_insertion_point(message_clear_start:PCommon_Base.MTest1)
  ::memset(&a_, 0, reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_) + sizeof(b_));
}

bool MTest1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PCommon_Base.MTest1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PCommon_Base.MTest1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PCommon_Base.MTest1)
  return false;
#undef DO_
}

void MTest1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PCommon_Base.MTest1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a = 1;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->a(), output);
  }

  // int32 b = 2;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->b(), output);
  }

  // @@protoc_insertion_point(serialize_end:PCommon_Base.MTest1)
}

::google::protobuf::uint8* MTest1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PCommon_Base.MTest1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a = 1;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->a(), target);
  }

  // int32 b = 2;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->b(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PCommon_Base.MTest1)
  return target;
}

size_t MTest1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PCommon_Base.MTest1)
  size_t total_size = 0;

  // int32 a = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->a());
  }

  // int32 b = 2;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->b());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTest1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PCommon_Base.MTest1)
  GOOGLE_DCHECK_NE(&from, this);
  const MTest1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MTest1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PCommon_Base.MTest1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PCommon_Base.MTest1)
    MergeFrom(*source);
  }
}

void MTest1::MergeFrom(const MTest1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PCommon_Base.MTest1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
}

void MTest1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PCommon_Base.MTest1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTest1::CopyFrom(const MTest1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PCommon_Base.MTest1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTest1::IsInitialized() const {
  return true;
}

void MTest1::Swap(MTest1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MTest1::InternalSwap(MTest1* other) {
  std::swap(a_, other->a_);
  std::swap(b_, other->b_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MTest1::GetMetadata() const {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MTest1

// int32 a = 1;
void MTest1::clear_a() {
  a_ = 0;
}
::google::protobuf::int32 MTest1::a() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.MTest1.a)
  return a_;
}
void MTest1::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:PCommon_Base.MTest1.a)
}

// int32 b = 2;
void MTest1::clear_b() {
  b_ = 0;
}
::google::protobuf::int32 MTest1::b() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.MTest1.b)
  return b_;
}
void MTest1::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:PCommon_Base.MTest1.b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MTest2::kAFieldNumber;
const int MTest2::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MTest2::MTest2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Common_5fBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PCommon_Base.MTest2)
}
MTest2::MTest2(const MTest2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:PCommon_Base.MTest2)
}

void MTest2::SharedCtor() {
  ::memset(&a_, 0, reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_) + sizeof(b_));
  _cached_size_ = 0;
}

MTest2::~MTest2() {
  // @@protoc_insertion_point(destructor:PCommon_Base.MTest2)
  SharedDtor();
}

void MTest2::SharedDtor() {
}

void MTest2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTest2::descriptor() {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MTest2& MTest2::default_instance() {
  protobuf_Common_5fBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

MTest2* MTest2::New(::google::protobuf::Arena* arena) const {
  MTest2* n = new MTest2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MTest2::Clear() {
// @@protoc_insertion_point(message_clear_start:PCommon_Base.MTest2)
  ::memset(&a_, 0, reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_) + sizeof(b_));
}

bool MTest2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PCommon_Base.MTest2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PCommon_Base.MTest2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PCommon_Base.MTest2)
  return false;
#undef DO_
}

void MTest2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PCommon_Base.MTest2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a = 2;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->a(), output);
  }

  // int32 b = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  // @@protoc_insertion_point(serialize_end:PCommon_Base.MTest2)
}

::google::protobuf::uint8* MTest2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PCommon_Base.MTest2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a = 2;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->a(), target);
  }

  // int32 b = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PCommon_Base.MTest2)
  return target;
}

size_t MTest2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PCommon_Base.MTest2)
  size_t total_size = 0;

  // int32 a = 2;
  if (this->a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->a());
  }

  // int32 b = 3;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->b());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTest2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PCommon_Base.MTest2)
  GOOGLE_DCHECK_NE(&from, this);
  const MTest2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MTest2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PCommon_Base.MTest2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PCommon_Base.MTest2)
    MergeFrom(*source);
  }
}

void MTest2::MergeFrom(const MTest2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PCommon_Base.MTest2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
}

void MTest2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PCommon_Base.MTest2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTest2::CopyFrom(const MTest2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PCommon_Base.MTest2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTest2::IsInitialized() const {
  return true;
}

void MTest2::Swap(MTest2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MTest2::InternalSwap(MTest2* other) {
  std::swap(a_, other->a_);
  std::swap(b_, other->b_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MTest2::GetMetadata() const {
  protobuf_Common_5fBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_5fBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MTest2

// int32 a = 2;
void MTest2::clear_a() {
  a_ = 0;
}
::google::protobuf::int32 MTest2::a() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.MTest2.a)
  return a_;
}
void MTest2::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:PCommon_Base.MTest2.a)
}

// int32 b = 3;
void MTest2::clear_b() {
  b_ = 0;
}
::google::protobuf::int32 MTest2::b() const {
  // @@protoc_insertion_point(field_get:PCommon_Base.MTest2.b)
  return b_;
}
void MTest2::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:PCommon_Base.MTest2.b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace PCommon_Base

// @@protoc_insertion_point(global_scope)
